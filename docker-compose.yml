services:

  db:
    image: postgres:14
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
    volumes:
      - app-db-data:/var/lib/postgresql/data
    environment:
      - PGDATA=/var/lib/postgresql/data/pgdata
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD?Variable not set}
      - POSTGRES_USER=${POSTGRES_USER?Variable not set}
      - POSTGRES_DB=${POSTGRES_DB?Variable not set}
      - POSTGRES_HOST=${POSTGRES_HOST?Variable not set}
      - POSTGRES_PORT=${POSTGRES_PORT?Variable not set}

  backend:
    image: '${DOCKER_IMAGE_BACKEND?Variable not set}:${TAG-latest}'
    depends_on:
      db:
        condition: service_healthy
        restart: true
    env_file:
      - .env
    networks:
      - default
    healthcheck:
        test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/utils/health-check/"]
        interval: 10s
        timeout: 5s
        retries: 5
    volumes:
      - static:/backend/static/
      - media:/backend/media/
    command: bash /scripts/start-prod.sh

  frontend:
    image: '${DOCKER_IMAGE_FRONTEND?Variable not set}:${TAG-latest}'
    depends_on:
      backend:
        condition: service_healthy
        restart: true
    env_file:
      - .env
    environment:
      - PORT=3000
    volumes:
      - frontend_dist:/app/dist/
    networks:
      - default
    command: sh -c 'cp -r ./.next/* /app/dist/ && npm run start'

  nginx:
    image: nginx:alpine
    restart: always
    depends_on:
      - frontend
    ports:
      - "9000:80"
    volumes:
      - static:/static/
      - media:/media/
      - ./infra/nginx.conf:/etc/nginx/conf.d/default.conf
      - frontend_dist:/usr/src/app/dist
    networks:
      - default

networks:
  default:
    driver: bridge

volumes:
  app-db-data:
  static:
  media:
  frontend_dist:
